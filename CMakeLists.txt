CMAKE_MINIMUM_REQUIRED(VERSION 3.1.3)

PROJECT(go-pronto C CXX)

# Set build type
IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Release CACHE STRING
      "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel."
      FORCE)
ENDIF(NOT CMAKE_BUILD_TYPE)

set (CMAKE_CXX_STANDARD 17)
set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++17")

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-result -Wno-gnu-designator")

OPTION(FLYWAVE_ENABLE_SOLUTION_FOLDERS "Build with UBSAN" ON)

if(FLYWAVE_ENABLE_SOLUTION_FOLDERS)
  SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)
  SET_PROPERTY(GLOBAL PROPERTY PREDEFINED_TARGETS_FOLDER "CMakeTargets")
endif()

# Set output directories
SET(FLYWAVE_LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/libs)

MAKE_DIRECTORY(${FLYWAVE_LIBRARY_OUTPUT_PATH})
MAKE_DIRECTORY("${FLYWAVE_LIBRARY_OUTPUT_PATH}/brotli/")

SET(FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}")
SET(FLYWAVE_LIBRARY_DIRS "")

# brotli
IF(NOT BROTLI_INCLUDE)
  ADD_SUBDIRECTORY("${CMAKE_CURRENT_SOURCE_DIR}/external/brotli/")

  LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/brotli/c/include")
  LIST(APPEND FLYWAVE_LIBRARY_DIRS "${CMAKE_CURRENT_BINARY_DIR}/external/brotli/")

  LIST(APPEND FLYWAVE_LIBRARY_DEPES "brotlicommon" "brotlidec" "brotlienc")
  SET(BROTLI_INCLUDE YES)
ENDIF()

foreach(LIBDIR ${FLYWAVE_LIBRARY_DIRS})
  INSTALL(
        DIRECTORY ${LIBDIR}
        DESTINATION ${FLYWAVE_LIBRARY_OUTPUT_PATH}
        USE_SOURCE_PERMISSIONS FILE_PERMISSIONS
        FILES_MATCHING PATTERN "*.a"
        )
  endforeach()


INSTALL(
  DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/external/brotli/c/include/brotli/"
  DESTINATION "${FLYWAVE_LIBRARY_OUTPUT_PATH}/brotli/"
  USE_SOURCE_PERMISSIONS FILE_PERMISSIONS
  FILES_MATCHING PATTERN "*.h"
  )
